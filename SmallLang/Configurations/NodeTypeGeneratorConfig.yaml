NodeTypeDefinitions:
  namespace: SmallLang.IR.AST
  usings: []
  generator: nodetypegenerator.py
  dst: IR/AST/Generated/ImportantASTNodeType.cs
  display name: "Generate-Node-Subclasses"

  name: ImportantASTNodeType
  data:
    - &ReTypingAlias ReTypingAlias: "data: IDENTIFIER, children: [Type Identifier]"
    - &ReTypeOriginal ReTypeOriginal: "data: IDENTIFIER, children: [Type]"
    - &Identifier Identifier: "data: IDENTIFIER, children: []"
    - &Section Section: "data: null, children: flattened array of statements"
    - &Function Function: "data: identifier, children: [type, statement] | [type, typeandidentifiercsv, statement]"
    - &LoopCTRL LoopCTRL: "data: break | continue, children: [] | [identifier: opnestedvalinloopcontrol]"
    - &For For: "data: null, children: [expression, expression, expression, Label, statement, else as Statement]"
    - &While While: "data: null, children: [expression, statement, Label, else as Statement]"
    - &LoopLabel LoopLabel: "data: identifier"
    - &Return Return: "NO FLATTEN, data: null, children: [Expression]"
    - &BaseType BaseType: "data: base type, children: []"
    - &GenericType GenericType: "data: generic type, children: [] // maybe children:[typecsv]?"
    - &If If: "data: null, children: [ExprStatementCombined+, OptionalElse as Statement] where OptionalElse is not EMPTY| [ExprStatementCombined+]"
    - &Switch Switch: "data: null, children: [Expression, ExprStatementCombined*]"
    - &ExprStatementCombined ExprStatementCombined: "data: null, children: [Expression, Statement]"
    - &TypeAndIdentifierCSV TypeAndIdentifierCSV: "data: null, children: [TypeAndIdentifierCSVElement+]"
    - &TypeAndIdentifierCSVElement TypeAndIdentifierCSVElement: "data: Identifier, children: [FunctionArgDeclModifiersCombined, Type]"
    - &AliasExpr AliasExpr: "data: IDENTIFIER, children: [Identifier]"
    - &Declaration Declaration: "data: Identifier, children: [DeclarationModifiersCombined, Type, AssignmentPrime] | [Type, AssignmentPrime] | [Type] | [Type, AssignmentPrime]"
    - &DeclarationModifiersCombined DeclarationModifiersCombined: "data: null, children: [DeclarationModifier*]"
    - &DeclarationModifier DeclarationModifier: "data: \"ref\" | \"readonly\" | \"frozen\" | \"immut\", children: []"
    - &FunctionArgDeclModifiers FunctionArgDeclModifiers: "data: *DeclarationModifier | \"copy\", children: []"
    - &FunctionArgDeclModifiersCombined FunctionArgDeclModifiersCombined: "data: null, children: [FunctionArgDeclModifiers+]"
    - &AssignmentPrime AssignmentPrime: "data: \"=\", children: [Expression]"
    - &FactorialExpression FactorialExpression: "data: null, children: [Expression, !+]"
    - &BinaryExpression BinaryExpression: "data: \"implies\" | \"or\" | \"xor\" | \"and\" | \"==\" | \"!=\" | \">\" | \">=\" | \"<\" | \"<=\" | \"+\" | \"-\" | \"*\" | \"/\" | \"**\" | \"|\" | \"^\" | \"&\", children: [Expression, Expression] // Deconstruct syntactic sugar of x < y > z and x == y == z etc into binary and and ops in parser"
    - &ComparisionExpression ComparisionExpression: "data: null, children: [Expression, OperatorExpressionPair+] // x < y > z > a -> [x, (< y), (> z), (> a)] via "
    - &OperatorExpressionPair OperatorExpressionPair: "data: cmpOperator, children: [Expression]"
    - &Primary Primary: "data: IDENTIFIER | NUMBER | STRING | BOOL, children: [] //paren expr is passthrough expr"
    - &FunctionIdentifier FunctionIdentifier: "data: IDENTIFIER, children: []"
    - &CopyExpr CopyExpr: "data: null, children: [Expression] //NO UP FLATTEN"
    - &NewExpr NewExpr: "data: null, children: [Type, ArgList] | [Type]"
    - &Index Index: "data: null, children: [Expression, Expression] where Expression1 is Primary or subset (parens etc)"
    - &FunctionCall FunctionCall: "data: null | \".\", children: [Expression, ArgList] | [Expression] where Expression1 i"
    - &ArgList ArgList: "data: null, children: [ArgListElement+]"
    - &ArgListElement ArgListElement: "data: null, children: [Expression] | [ArgListLabel, Expression]"
    - &TypeCSV TypeCSV: "data: null, children: [Type+]"
    - &UnaryExpression UnaryExpression: ""
    - &Else Else: ""
    - &FactorialSymbol FactorialSymbol: ""
#region expected structure:

#dynamicastnode subclasses:
#    classes:
#        -
#            name: [class name]
#            children:
#                -
#                    name: [child name]
#                    is optional: [yes | no]
#            has data: [yes | no]
#            check data type: [yes | no]
#            valid data types:
#                - [data type]
#            has additional data validation function: [yes | no]
#            data validation function: |
#                [valid c# BODY (everything between the curly brackets). Should probably just be a return [Expression]]
#    enum type: [Enum Type Name]
#    annotation type: [Annotation Type Name]
#//data: identifier, children: [type, statement] | [type, typeandidentifiercsv, statement]
#endregion
dynamicastnode subclasses:
  namespace: SmallLang.IR.AST.Generated
  usings: ["Common.Tokens", "Common.AST", "SmallLang.IR.Metadata"]
  generator: generatedynamicastnodesubclasses.py
  dst: "IR/AST/Generated"
  display name: Generate-ImportantASTNodeType

  
  enum type: ImportantASTNodeType
  annotation type: Attributes

  data:
    interfaces:
      - name: &Statement IStatement
        parents:
        - &ISmallLangNode ISmallLangNode
      - name: &Expression IExpression
        parents:
        - *ISmallLangNode
      - name: &Type Type
        parents:
        - *ISmallLangNode
        
    classes:
      - name: *ReTypingAlias
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: no
        parents:
        - &SmallLangNode SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []

      - name: *ReTypeOriginal
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: no
          - type: Identifier
            name: Identifier
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Identifier
        children: []
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Section
        children:
          - type: Statement
            name: Statement
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Function
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: no
          - type: TypeAndIdentifierCSV
            name: TypeAndIdentifierCSV
            is optional: yes
            is multiple: no
          - type: Statement
            name: Statement
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Statement
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *LoopCTRL
        children:
          - type: Identifier
            name: Identifier
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - Break
        - Continue
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Else
        children:
          - type: Statement
            name: Statement
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *For
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: LoopLabel
            name: LoopLabel
            is optional: yes
            is multiple: no
          - type: Statement
            name: Statement
            is optional: no
            is multiple: no
          - type: Else
            name: Else
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *While
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: LoopLabel
            name: LoopLabel
            is optional: yes
            is multiple: no
          - type: Statement
            name: Statement
            is optional: no
            is multiple: no
          - type: Else
            name: Else
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *LoopLabel
        children: []
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Return
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *BaseType
        children: []
        parents:
        - *SmallLangNode
        - *Type
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *GenericType
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        - *Type
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
              
      - name: *If
        children:
          - type: ExprStatementCombined
            name: ExprStatementCombined
            is optional: no
            is multiple: yes
          - type: Else
            name: Else
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Switch
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: ExprStatementCombined
            name: ExprStatementCombined
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        - *Statement
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *ExprStatementCombined
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: Statement
            name: Statement
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *TypeAndIdentifierCSV
        children:
          - type: TypeAndIdentifierCSVElement
            name: TypeAndIdentifierCSVElement
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *TypeAndIdentifierCSVElement
        children:
          - type: FunctionArgDeclModifiersCombined
            name: FunctionArgDeclModifiersCombined
            is optional: no
            is multiple: no
          - type: Type
            name: Type
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *AliasExpr
        children:
          - type: Identifier
            name: Identifier
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Declaration
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: no
          - type: DeclarationModifiersCombined
            name: DeclarationModifiersCombined
            is optional: yes
            is multiple: no
          - type: AssignmentPrime
            name: AssignmentPrime
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *DeclarationModifiersCombined
        children:
          - type: DeclarationModifier
            name: DeclarationModifier
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      
      
      
      - name: *DeclarationModifier
        children: []
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - "Ref"
        - "Readonly"
        - "Frozen"
        - "Immut"
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *FunctionArgDeclModifiers
        children: []
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - "Ref"
        - "Readonly"
        - "Frozen"
        - "Immut"
        - "Copy"
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *FunctionArgDeclModifiersCombined
        children:
          - type: FunctionArgDeclModifiers
            name: FunctionArgDeclModifiers
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *AssignmentPrime
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - "Equals"
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *FactorialSymbol
        children: []
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - Factorial
        has additional data validation function: no
        data validation function: no
        attributes: []
      

      - name: *FactorialExpression
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: FactorialSymbol
            name: FactorialSymbol
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        - *Expression
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *BinaryExpression
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - "LogicalImplies"
        - "LogicalOr"
        - "LogicalXor"
        - "LogicalAnd"
        # - "=="
        # - "!="
        # - ">"
        # - ">="
        # - "<"
        # - "<="
        - Addition
        - Subtraction
        - Multiplication
        - Division
        - Exponentiation
        - BitwiseOr
        - BitwiseXor
        - BitwiseAnd
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *ComparisionExpression
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: OperatorExpressionPair
            name: OperatorExpressionPair
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        - *Expression
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *OperatorExpressionPair
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        has data: yes
        check data type: yes
        valid data types:
        - EqualTo
        - NotEqualTo
        - GreaterThan
        - GreaterThanOrEqualTo
        - LessThan
        - LessThanOrEqualTo
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Primary
        children: []
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        - Number
        - String
        - TrueLiteral
        - FalseLiteral
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *FunctionIdentifier
        children: []
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - Identifier
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *CopyExpr
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *NewExpr
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: no
          - type: ArgList
            name: ArgList
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *Index
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *FunctionCall
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: ArgList
            name: ArgList
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *ArgList
        children:
          - type: ArgListElement
            name: ArgListElement
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *ArgListElement
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
          - type: Identifier
            name: Identifier
            is optional: yes
            is multiple: no
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *TypeCSV
        children:
          - type: Type
            name: Type
            is optional: no
            is multiple: yes
        parents:
        - *SmallLangNode
        has data: no
        check data type: no
        valid data types: []
        has additional data validation function: no
        data validation function: no
        attributes: []
      
      - name: *UnaryExpression
        children:
          - type: Expression
            name: Expression
            is optional: no
            is multiple: no
        parents:
        - *SmallLangNode
        - *Expression
        has data: yes
        check data type: yes
        valid data types:
        - BitwiseNegation
        - Subtraction
        - "LogicalNot"
        has additional data validation function: no
        data validation function: no
        attributes: []
    

chunktree classes: #not subclasses of Chunks since Chunks implies all the chunk pointers are resolved
  ignore: yes
  namespace: SmallLang.IR.LinearIR.Generated
  usings: []
  generator: chunktree.py
  dst: "IR/LinearIR/Generated"
  display name: Generate-Chunktrees

  data:
    - name: *Function
      children:
        - Child1