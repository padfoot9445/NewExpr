ImportantASTNodeTypeDefinitions:
  namespace: SmallLang.IR.AST
  usings: []
  data:
    - &ReTypingAlias ReTypingAlias: "//data: IDENTIFIER, children: [Type Identifier]"
    - &ReTypeOriginal ReTypeOriginal: "//data: IDENTIFIER, children: [Type]"
    - &Identifier Identifier: "//data: IDENTIFIER, children: []"
    - &Section Section: "//data: null, children: flattened array of statements"
    - &Function Function: "//data: identifier, children: [type, statement] | [type, typeandidentifiercsv, statement]"
    - &LoopCTRL LoopCTRL: "//data: break | continue, children: [] | [identifier: opnestedvalinloopcontrol]"
    - &For For: "//data: null, children: [expression, expression, expression, Label, statement, else as Statement]"
    - &While While: "//data: null, children: [expression, statement, Label, else as Statement]"
    - &ValInLCTRL ValInLCTRL: "//data: identifier //TODO: Remove"
    - &LoopLabel LoopLabel: "//data: identifier"
    - &Return Return: "//NO FLATTEN, data: null, children: [Expression]"
    - &BaseType BaseType: "//data: base type, children: []"
    - &GenericType GenericType: "//data: generic type, children: [] // maybe children:[typecsv]?"
    - &If If: "//data: null, children: [ExprStatementCombined+, OptionalElse as Statement] where OptionalElse is not EMPTY| [ExprStatementCombined+]"
    - &Switch Switch: "//data: null, children: [Expression, ExprStatementCombined*]"
    - &ExprStatementCombined ExprStatementCombined: "//data: null, children: [Expression, Statement]"
    - &TypeAndIdentifierCSV TypeAndIdentifierCSV: "//data: null, children: [TypeAndIdentifierCSVElement+]"
    - &TypeAndIdentifierCSVElement TypeAndIdentifierCSVElement: "//data: Identifier, children: [FunctionArgDeclModifiersCombined, Type]"
    - &AliasExpr AliasExpr: "//data: IDENTIFIER, children: [Identifier]"
    - &Declaration Declaration: "//data: Identifier, children: [DeclarationModifiersCombined, Type, AssignmentPrime] | [Type, AssignmentPrime] | [Type] | [Type, AssignmentPrime]"
    - &DeclarationModifiersCombined DeclarationModifiersCombined: "//data: null, children: [DeclarationModifier*]"
    - &DeclarationModifier DeclarationModifier: "//data: \"ref\" | \"readonly\" | \"frozen\" | \"immut\", children: []"
    - &FunctionArgDeclModifiers FunctionArgDeclModifiers: "//data: *DeclarationModifier | \"copy\", children: []"
    - &FunctionArgDeclModifiersCombined FunctionArgDeclModifiersCombined: "//data: null, children: [FunctionArgDeclModifiers+]"
    - &AssignmentPrime AssignmentPrime: "//data: \"=\", children: [Expression]"
    - &FactorialExpression FactorialExpression: "//data: null, children: [Expression, !+]"
    - &BinaryExpression BinaryExpression: "//data: \"implies\" | \"or\" | \"xor\" | \"and\" | \"==\" | \"!=\" | \">\" | \">=\" | \"<\" | \"<=\" | \"+\" | \"-\" | \"*\" | \"/\" | \"**\" | \"|\" | \"^\" | \"&\", children: [Expression, Expression] // Deconstruct syntactic sugar of x < y > z and x == y == z etc into binary and and ops in parser"
    - &ComparisionExpression ComparisionExpression: "//data: null, children: [Expression, OperatorExpressionPair+] // x < y > z > a -> [x, (< y), (> z), (> a)] via "
    - &OperatorExpressionPair OperatorExpressionPair: "//data: cmpOperator, children: [Expression]"
    - &Primary Primary: "//data: IDENTIFIER | NUMBER | STRING | BOOL, children: [] //paren expr is passthrough expr"
    - &FunctionIdentifier FunctionIdentifier: "//data: IDENTIFIER, children: []"
    - &CopyExpr CopyExpr: "//data: null, children: [Expression] //NO UP FLATTEN"
    - &NewExpr NewExpr: "//data: null, children: [Type, ArgList] | [Type]"
    - &Index Index: "//data: null, children: [Expression, Expression] where Expression1 is Primary or subset (parens etc)"
    - &FunctionCall FunctionCall: "//data: null | \".\", children: [Expression, ArgList] | [Expression] where Expression1 i"
    - &ArgList ArgList: "//data: null, children: [ArgListElement+]"
    - &ArgListElement ArgListElement: "//data: null, children: [Expression] | [ArgListLabel, Expression]"
    - &TypeCSV TypeCSV: "//data: null, children: [Type+]"
    - &UnaryExpression UnaryExpression: ""
    - &Else Else: ""
    - &FactorialSymbol FactorialSymbol: ""
#region expected structure:

#dynamicastnode subclasses:
#    classes:
#        -
#            name: [class name]
#            children:
#                -
#                    name: [child name]
#                    is optional: [yes | no]
#            has data: [yes | no]
#            check data type: [yes | no]
#            valid data types:
#                - [data type]
#            has additional data validation function: [yes | no]
#            data validation function: |
#                [valid c# BODY (everything between the curly brackets). Should probably just be a return [Expression]]
#    enum type: [Enum Type Name]
#    annotation type: [Annotation Type Name]
#//data: identifier, children: [type, statement] | [type, typeandidentifiercsv, statement]
#endregion
dynamicastnode subclasses:
  namespace: SmallLang.IR.AST.Generated
  usings: ["Common.Tokens", "Common.AST", "SmallLang.IR.Metadata"]
  base classes:
    - name: &SmallLangNode SmallLang
      parent: no
    - name: &Statement Statement
      parent: *SmallLangNode
    - name: &Expression Expression
      parent: *SmallLangNode
    - name: &Type Type
      parent: *SmallLangNode
  classes:
    - name: *ReTypingAlias
      children:
        - name: *Type
          is optional: no
          is multiple: no
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no

    - name: *ReTypeOriginal
      children:
        - name: *Type
          is optional: no
          is multiple: no
        - name: *Identifier
          is optional: no
          is multiple: no
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *Identifier
      children: []
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *Section
      children:
        - name: *Statement
          is optional: no
          is multiple: yes
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *Function
      children:
        - name: *Type
          is optional: no
          is multiple: no
        - name: *TypeAndIdentifierCSV
          is optional: yes
          is multiple: no
        - name: *Statement
          is optional: no
          is multiple: no
      parent: *Statement
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *LoopCTRL
      children:
        - name: *Identifier
          is optional: yes
          is multiple: no
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - Break
      - Continue
      has additional data validation function: no
      data validation function: no
    
    - name: *Else
      children:
        - name: *Statement
          is optional: no
          is multiple: no
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *For
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *LoopLabel
          is optional: yes
          is multiple: no
        - name: *Statement
          is optional: no
          is multiple: no
        - name: *Else
          is optional: yes
          is multiple: no
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *While
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *LoopLabel
          is optional: yes
          is multiple: no
        - name: *Statement
          is optional: no
          is multiple: no
        - name: *Else
          is optional: yes
          is multiple: no
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *LoopLabel
      children: []
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *Return
      children:
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *BaseType
      children: []
      parent: *Type
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *GenericType
      children:
        - name: *Type
          is optional: no
          is multiple: yes
      parent: *Type
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
            
    - name: *If
      children:
        - name: *ExprStatementCombined
          is optional: no
          is multiple: yes
        - name: *Else
          is optional: yes
          is multiple: no
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *Switch
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *ExprStatementCombined
          is optional: no
          is multiple: yes
      parent: *Statement
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *ExprStatementCombined
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *Statement
          is optional: no
          is multiple: no
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *TypeAndIdentifierCSV
      children:
        - name: *TypeAndIdentifierCSVElement
          is optional: no
          is multiple: yes
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *TypeAndIdentifierCSVElement
      children:
        - name: *FunctionArgDeclModifiersCombined
          is optional: no
          is multiple: no
        - name: *Type
          is optional: no
          is multiple: no
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *AliasExpr
      children:
        - name: *Identifier
          is optional: no
          is multiple: no
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *Declaration
      children:
        - name: *Type
          is optional: no
          is multiple: no
        - name: *DeclarationModifiersCombined
          is optional: yes
          is multiple: no
        - name: *AssignmentPrime
          is optional: yes
          is multiple: no
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *DeclarationModifiersCombined
      children:
        - name: *DeclarationModifier
          is optional: no
          is multiple: yes
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    
    
    
    - name: *DeclarationModifier
      children: []
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - "Ref"
      - "Readonly"
      - "Frozen"
      - "Immut"
      has additional data validation function: no
      data validation function: no
    
    - name: *FunctionArgDeclModifiers
      children: []
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - "Ref"
      - "Readonly"
      - "Frozen"
      - "Immut"
      - "Copy"
      has additional data validation function: no
      data validation function: no
    
    - name: *FunctionArgDeclModifiersCombined
      children:
        - name: *FunctionArgDeclModifiers
          is optional: no
          is multiple: yes
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *AssignmentPrime
      children:
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - "Equals"
      has additional data validation function: no
      data validation function: no
    
    - name: *FactorialSymbol
      children: []
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - Factorial
      has additional data validation function: no
      data validation function: no
    

    - name: *FactorialExpression
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *FactorialSymbol
          is optional: no
          is multiple: yes
      parent: *Expression
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *BinaryExpression
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - "LogicalImplies"
      - "LogicalOr"
      - "LogicalXor"
      - "LogicalAnd"
      # - "=="
      # - "!="
      # - ">"
      # - ">="
      # - "<"
      # - "<="
      - Addition
      - Subtraction
      - Multiplication
      - Division
      - Exponentiation
      - BitwiseOr
      - BitwiseXor
      - BitwiseAnd
      has additional data validation function: no
      data validation function: no
    
    - name: *ComparisionExpression
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *OperatorExpressionPair
          is optional: no
          is multiple: yes
      parent: *Expression
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *OperatorExpressionPair
      children:
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *SmallLangNode
      has data: yes
      check data type: yes
      valid data types:
      - EqualTo
      - NotEqualTo
      - GreaterThan
      - GreaterThanOrEqualTo
      - LessThan
      - LessThanOrEqualTo
      has additional data validation function: no
      data validation function: no
    
    - name: *Primary
      children: []
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      - Number
      - String
      - TrueLiteral
      - FalseLiteral
      has additional data validation function: no
      data validation function: no
    
    - name: *FunctionIdentifier
      children: []
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - Identifier
      has additional data validation function: no
      data validation function: no
    
    - name: *CopyExpr
      children:
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *Expression
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *NewExpr
      children:
        - name: *Type
          is optional: no
          is multiple: no
        - name: *ArgList
          is optional: yes
          is multiple: no
      parent: *Expression
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *Index
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *Expression
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *FunctionCall
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *ArgList
          is optional: yes
          is multiple: no
      parent: *Expression
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *ArgList
      children:
        - name: *ArgListElement
          is optional: no
          is multiple: yes
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *ArgListElement
      children:
        - name: *Expression
          is optional: no
          is multiple: no
        - name: *Identifier
          is optional: yes
          is multiple: no
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *TypeCSV
      children:
        - name: *Type
          is optional: no
          is multiple: yes
      parent: *SmallLangNode
      has data: no
      check data type: no
      valid data types: []
      has additional data validation function: no
      data validation function: no
    
    - name: *UnaryExpression
      children:
        - name: *Expression
          is optional: no
          is multiple: no
      parent: *Expression
      has data: yes
      check data type: yes
      valid data types:
      - BitwiseNegation
      - Subtraction
      - "LogicalNot"
      has additional data validation function: no
      data validation function: no
    

  enum type: ImportantASTNodeType
  annotation type: Attributes

chunktree classes: #not subclasses of Chunks since Chunks implies all the chunk pointers are resolved
  namespace: SmallLang.IR.LinearIR.Generated
  usings: []
  data:
    - name: *Function
      children:
        - Child1