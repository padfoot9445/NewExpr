Section : Statement*
Statement : SCExpr | Loop | Cond | Function | CascadingFunction | Block | ReturnStatement | LoopControlStatement
SCExpr : Expression ";"
ReturnStatement : "return" Expression ";"
LoopControlStatement : ("break" | "continue") NestedValueInLoopControl ";"
NestedValueInLoopControl : IDENTIFIER
Loop : (ForLoopHeader | WhileLoopHeader) LoopLabel? Statement Else?
LoopLabel : "as" IDENTIFIER
ForLoopHeader : "for" "(" Expression ";" Expression ";" Expression ")"
WhileLoopHeader : "while" "(" Expression ")"
Cond : [If | Switch]
If : "if" "(" Expression ")" Statement Else?
Else : "else" Statement
Switch : "switch" "(" Expression ")" "{" SwitchBody* "}"
SwitchBody : Expression ":" Statement
Function : Type IDENTIFIER"(" TypeAndIdentifierCSV? ")" Statement
TypeAndIdentifierCSVElement : FunctionArgDeclModifiersCombined Type IDENTIFIER
TypeAndIdentifierCSV : TypeAndIdentifierCSVElement TypeAndIdentifierCSVPrime*
TypeAndIdentifierCSVPrime : "," TypeAndIdentifierCSVElement
Block : "{" Section "}"



#EXPRESSIONS
#Expression : Primary > BitwiseExpr > ArithmeticExpr > ComparisonExpr > BooleanLogicExpr > AssignmentExpr > DeclarationExpr > AutoCrementExpr > AliasExpr precedence wise
Expression : AliasExpr


AliasExpr : [AliasExpr1 | AliasExpr2 | DeclarationExpr]
AliasExpr1 : IDENTIFIER "as" IDENTIFIER
AliasExpr2 : IDENTIFIER "as" Type IDENTIFIER?   

DeclarationExpr :
    [DeclarationExpr1 |
    AssignmentExpr]
DeclarationExpr1 : DeclarationModifiersCombined Type IDENTIFIER AssignmentPrime?
DeclarationModifiersCombined : DeclarationModifier*
DeclarationModifier : ["ref" | "readonly" | "frozen" | "immut"]
FunctionArgDeclModifier : ["ref" | "readonly" | "frozen" | "immut" | "copy"]
FunctionArgDeclModifiersCombined : FunctionArgDeclModifier+
AssignmentPrime : "=" Expression #("=" Expression AssignmentPrime) as assignment is in expression
AssignmentExpr : AssignmentExpr1
AssignmentExpr1 : BooleanLogicExpr AssignmentPrime?

BooleanLogicExpr : ImpliesExpr

ImpliesExpr : OrExpr ImpliesPrime
ImpliesPrime : "implies" OrExpr ImpliesPrime | EMPTY
OrExpr : XorExpr OrExprPrime
OrExprPrime : "or" XorExpr OrExprPrime | EMPTY
XorExpr : AndExpr XorExprPrime
XorExprPrime : "xor" AndExpr XorExprPrime | EMPTY
AndExpr : NotExpr AndExprPrime
AndExprPrime : "and" NotExpr AndExprPrime | EMPTY
NotExpr : "not" ComparisonExpr | ComparisonExpr

ComparisonExpr : EqualityComparisonExpr

EqualityComparisonExpr : NonEqualityComparisonExpr EqualityComparisonExprPrime
EqualityComparisonExprPrime : "==" NonEqualityComparisonExpr EqualityComparisonExprPrime | EMPTY
NonEqualityComparisonExpr : RelationalComparisonExpr NonEqualityComparisonExprPrime
NonEqualityComparisonExprPrime : "!=" RelationalComparisonExpr | EMPTY; #no repeat

RelationalComparisonExpr : GreaterThanComparisonExpr

GreaterThanComparisonExpr : LesserThanComparisonExpr GreaterThanComparisonExprPrime
GreaterThanComparisonExprPrime : (">" | ">=") ArithmeticExpr GreaterThanComparisonExprPrime | EMPTY; #we do not descend here into lesserthancomparisonexpr as we want to preserve the a < b < ... < x > y > ... > z
LesserThanComparisonExpr : ArithmeticExpr LesserThanComparisonExprPrime
LesserThanComparisonExprPrime : ("<" | "<=") ArithmeticExpr LesserThanComparisonExprPrime | EMPTY

ArithmeticExpr : Addition

Addition : Multiplication AdditionPrime
AdditionPrime : ("+" | "-") Multiplication AdditionPrime | EMPTY
Multiplication : Power MultiplicationPrime
MultiplicationPrime :  ("*" | "/")  Power MultiplicationPrime | EMPTY
Power : Negation PowerPrime
PowerPrime : "**" Negation PowerPrime | EMPTY
Negation : NegationPrime Factorial
NegationPrime : "-" NegationPrime | EMPTY
Factorial : BitwiseExpr FactorialPrime
FactorialPrime : "!" FactorialPrime | EMPTY

BitwiseExpr : BitwiseOrExpr

BitwiseOrExpr : BitwiseXorExpr BitwiseOrExprPrime
BitwiseOrExprPrime : "|" BitwiseXorExpr BitwiseOrExprPrime | EMPTY
BitwiseXorExpr : BitwiseAndExpr BitwiseXorExprPrime
BitwiseXorExprPrime : "^" BitwiseAndExpr BitwiseXorExprPrime | EMPTY
BitwiseAndExpr : BitwiseNotExpr BitwiseAndExprPrime
BitwiseAndExprPrime : "&" BitwiseNotExpr BitwiseAndExprPrime | EMPTY
BitwiseNotExpr : "~" Primary | Primary

Primary : LPrimary PrimaryPrime?
PrimaryPrime : IndexPrime | FunctionCallPrime
IndexPrime : "[" Expression "]"
LPrimary : NewExpr | LPrimary1 | LPrimary2 | LPrimary3 #no need to be so fancy as to support interpolation etc
LPrimary1 : "(" Expression ")"
LPrimary2 : "copy" Expression
LPrimary3 : IDENTIFIER | NUMBER | STRING | TRUELITERAL | FALSELITERAL
NewExpr : "new" Type "(" ArgList? ")"
FunctionCallPrime : "." "(" ArgList? ")" | "(" ArgList? ")"
ArgListElement : ArgumentLabel? Expression
ArgList : ArgListElement ArgListPrime
ArgListPrime : "," ArgListElement ArgListPrime
ArgumentLabel : IDENTIFIER ":"
TypeCSV : Type ("," TypeCSV | EMPTY )
#region KW Groups
    Type : BaseType | GenericType
        GenericType : ("array" | "list" | "set" | "dict" | "collection") "<[" TypeCSV "]>"
        BaseType : "byte" | "short" | "int" | "long" | "bigint" | "float" | "double" | "rational" | "bigfloat" | "string" | "char" | "void"
    #endregion
#region Consts
    BOOLEAN : "true" | "false"
        IDENTIFIER : {LexerDefined}; #[a-zA-Z_] [a-zA-Z0-9_]*
    NUMBER : {LexerDefined}; #[0-9]+ | [0-9]+ "." [0-9]+
    STRING : {LexerDefined}; #(" | ')
#endregion
